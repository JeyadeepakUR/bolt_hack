{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\evank\\\\OneDrive\\\\Desktop\\\\projects\\\\Bolt Hackathon\\\\src\\\\components\\\\ThreeBackground.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThreeBackground = () => {\n  _s();\n  const mountRef = useRef(null);\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const animationIdRef = useRef(null);\n  useEffect(() => {\n    if (!mountRef.current) return;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    sceneRef.current = scene;\n\n    // Camera setup\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.z = 50;\n\n    // Renderer setup\n    const renderer = new THREE.WebGLRenderer({\n      alpha: true,\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setClearColor(0x000000, 0);\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n    rendererRef.current = renderer;\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Create particle system\n    const particleCount = 200;\n    const particles = new THREE.BufferGeometry();\n    const positions = new Float32Array(particleCount * 3);\n    const colors = new Float32Array(particleCount * 3);\n    const sizes = new Float32Array(particleCount);\n    for (let i = 0; i < particleCount; i++) {\n      // Position\n      positions[i * 3] = (Math.random() - 0.5) * 200;\n      positions[i * 3 + 1] = (Math.random() - 0.5) * 200;\n      positions[i * 3 + 2] = (Math.random() - 0.5) * 200;\n\n      // Color - professional blue/purple gradient\n      const color = new THREE.Color();\n      color.setHSL(0.6 + Math.random() * 0.1, 0.8, 0.5 + Math.random() * 0.3);\n      colors[i * 3] = color.r;\n      colors[i * 3 + 1] = color.g;\n      colors[i * 3 + 2] = color.b;\n\n      // Size\n      sizes[i] = Math.random() * 2 + 0.5;\n    }\n    particles.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n    particles.setAttribute('color', new THREE.BufferAttribute(colors, 3));\n    particles.setAttribute('size', new THREE.BufferAttribute(sizes, 1));\n\n    // Particle material\n    const particleMaterial = new THREE.PointsMaterial({\n      size: 2,\n      vertexColors: true,\n      transparent: true,\n      opacity: 0.6,\n      blending: THREE.AdditiveBlending,\n      depthWrite: false\n    });\n    const particleSystem = new THREE.Points(particles, particleMaterial);\n    scene.add(particleSystem);\n\n    // Create connecting lines\n    const lineGeometry = new THREE.BufferGeometry();\n    const linePositions = [];\n    const lineColors = [];\n\n    // Connect nearby particles\n    for (let i = 0; i < particleCount; i++) {\n      for (let j = i + 1; j < particleCount; j++) {\n        const distance = Math.sqrt(Math.pow(positions[i * 3] - positions[j * 3], 2) + Math.pow(positions[i * 3 + 1] - positions[j * 3 + 1], 2) + Math.pow(positions[i * 3 + 2] - positions[j * 3 + 2], 2));\n        if (distance < 30) {\n          linePositions.push(positions[i * 3], positions[i * 3 + 1], positions[i * 3 + 2], positions[j * 3], positions[j * 3 + 1], positions[j * 3 + 2]);\n          const opacity = 1 - distance / 30;\n          lineColors.push(0.4, 0.6, 1, opacity, 0.4, 0.6, 1, opacity);\n        }\n      }\n    }\n    if (linePositions.length > 0) {\n      lineGeometry.setAttribute('position', new THREE.Float32BufferAttribute(linePositions, 3));\n      lineGeometry.setAttribute('color', new THREE.Float32BufferAttribute(lineColors, 4));\n      const lineMaterial = new THREE.LineBasicMaterial({\n        vertexColors: true,\n        transparent: true,\n        opacity: 0.3,\n        blending: THREE.AdditiveBlending\n      });\n      const lines = new THREE.LineSegments(lineGeometry, lineMaterial);\n      scene.add(lines);\n    }\n\n    // Animation\n    const animate = () => {\n      animationIdRef.current = requestAnimationFrame(animate);\n\n      // Rotate particle system slowly\n      particleSystem.rotation.x += 0.001;\n      particleSystem.rotation.y += 0.002;\n\n      // Move particles slightly\n      const positions = particleSystem.geometry.attributes.position.array;\n      for (let i = 0; i < positions.length; i += 3) {\n        positions[i + 1] += Math.sin(Date.now() * 0.001 + i) * 0.01;\n      }\n      particleSystem.geometry.attributes.position.needsUpdate = true;\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Handle resize\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      if (animationIdRef.current) {\n        cancelAnimationFrame(animationIdRef.current);\n      }\n      if (mountRef.current && renderer.domElement) {\n        mountRef.current.removeChild(renderer.domElement);\n      }\n      renderer.dispose();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    className: \"fixed inset-0 -z-10\",\n    style: {\n      pointerEvents: 'none'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 9\n  }, this);\n};\n_s(ThreeBackground, \"++w1yV88wcHyn5I/zggwGQruTXs=\");\n_c = ThreeBackground;\nexport default ThreeBackground;\nvar _c;\n$RefreshReg$(_c, \"ThreeBackground\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","jsxDEV","_jsxDEV","ThreeBackground","_s","mountRef","sceneRef","rendererRef","animationIdRef","current","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","z","renderer","WebGLRenderer","alpha","antialias","setSize","setClearColor","setPixelRatio","Math","min","devicePixelRatio","appendChild","domElement","particleCount","particles","BufferGeometry","positions","Float32Array","colors","sizes","i","random","color","Color","setHSL","r","g","b","setAttribute","BufferAttribute","particleMaterial","PointsMaterial","size","vertexColors","transparent","opacity","blending","AdditiveBlending","depthWrite","particleSystem","Points","add","lineGeometry","linePositions","lineColors","j","distance","sqrt","pow","push","length","Float32BufferAttribute","lineMaterial","LineBasicMaterial","lines","LineSegments","animate","requestAnimationFrame","rotation","x","y","geometry","attributes","array","sin","Date","now","needsUpdate","render","handleResize","aspect","updateProjectionMatrix","addEventListener","removeEventListener","cancelAnimationFrame","removeChild","dispose","ref","className","style","pointerEvents","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/evank/OneDrive/Desktop/projects/Bolt Hackathon/src/components/ThreeBackground.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\n\nconst ThreeBackground = () => {\n    const mountRef = useRef(null);\n    const sceneRef = useRef(null);\n    const rendererRef = useRef(null);\n    const animationIdRef = useRef(null);\n\n    useEffect(() => {\n        if (!mountRef.current) return;\n\n        // Scene setup\n        const scene = new THREE.Scene();\n        sceneRef.current = scene;\n\n        // Camera setup\n        const camera = new THREE.PerspectiveCamera(\n            75,\n            window.innerWidth / window.innerHeight,\n            0.1,\n            1000\n        );\n        camera.position.z = 50;\n\n        // Renderer setup\n        const renderer = new THREE.WebGLRenderer({\n            alpha: true,\n            antialias: true\n        });\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        renderer.setClearColor(0x000000, 0);\n        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n        rendererRef.current = renderer;\n\n        mountRef.current.appendChild(renderer.domElement);\n\n        // Create particle system\n        const particleCount = 200;\n        const particles = new THREE.BufferGeometry();\n        const positions = new Float32Array(particleCount * 3);\n        const colors = new Float32Array(particleCount * 3);\n        const sizes = new Float32Array(particleCount);\n\n        for (let i = 0; i < particleCount; i++) {\n            // Position\n            positions[i * 3] = (Math.random() - 0.5) * 200;\n            positions[i * 3 + 1] = (Math.random() - 0.5) * 200;\n            positions[i * 3 + 2] = (Math.random() - 0.5) * 200;\n\n            // Color - professional blue/purple gradient\n            const color = new THREE.Color();\n            color.setHSL(0.6 + Math.random() * 0.1, 0.8, 0.5 + Math.random() * 0.3);\n            colors[i * 3] = color.r;\n            colors[i * 3 + 1] = color.g;\n            colors[i * 3 + 2] = color.b;\n\n            // Size\n            sizes[i] = Math.random() * 2 + 0.5;\n        }\n\n        particles.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n        particles.setAttribute('color', new THREE.BufferAttribute(colors, 3));\n        particles.setAttribute('size', new THREE.BufferAttribute(sizes, 1));\n\n        // Particle material\n        const particleMaterial = new THREE.PointsMaterial({\n            size: 2,\n            vertexColors: true,\n            transparent: true,\n            opacity: 0.6,\n            blending: THREE.AdditiveBlending,\n            depthWrite: false\n        });\n\n        const particleSystem = new THREE.Points(particles, particleMaterial);\n        scene.add(particleSystem);\n\n        // Create connecting lines\n        const lineGeometry = new THREE.BufferGeometry();\n        const linePositions = [];\n        const lineColors = [];\n\n        // Connect nearby particles\n        for (let i = 0; i < particleCount; i++) {\n            for (let j = i + 1; j < particleCount; j++) {\n                const distance = Math.sqrt(\n                    Math.pow(positions[i * 3] - positions[j * 3], 2) +\n                    Math.pow(positions[i * 3 + 1] - positions[j * 3 + 1], 2) +\n                    Math.pow(positions[i * 3 + 2] - positions[j * 3 + 2], 2)\n                );\n\n                if (distance < 30) {\n                    linePositions.push(\n                        positions[i * 3], positions[i * 3 + 1], positions[i * 3 + 2],\n                        positions[j * 3], positions[j * 3 + 1], positions[j * 3 + 2]\n                    );\n\n                    const opacity = 1 - (distance / 30);\n                    lineColors.push(\n                        0.4, 0.6, 1, opacity,\n                        0.4, 0.6, 1, opacity\n                    );\n                }\n            }\n        }\n\n        if (linePositions.length > 0) {\n            lineGeometry.setAttribute('position', new THREE.Float32BufferAttribute(linePositions, 3));\n            lineGeometry.setAttribute('color', new THREE.Float32BufferAttribute(lineColors, 4));\n\n            const lineMaterial = new THREE.LineBasicMaterial({\n                vertexColors: true,\n                transparent: true,\n                opacity: 0.3,\n                blending: THREE.AdditiveBlending\n            });\n\n            const lines = new THREE.LineSegments(lineGeometry, lineMaterial);\n            scene.add(lines);\n        }\n\n        // Animation\n        const animate = () => {\n            animationIdRef.current = requestAnimationFrame(animate);\n\n            // Rotate particle system slowly\n            particleSystem.rotation.x += 0.001;\n            particleSystem.rotation.y += 0.002;\n\n            // Move particles slightly\n            const positions = particleSystem.geometry.attributes.position.array;\n            for (let i = 0; i < positions.length; i += 3) {\n                positions[i + 1] += Math.sin(Date.now() * 0.001 + i) * 0.01;\n            }\n            particleSystem.geometry.attributes.position.needsUpdate = true;\n\n            renderer.render(scene, camera);\n        };\n\n        animate();\n\n        // Handle resize\n        const handleResize = () => {\n            camera.aspect = window.innerWidth / window.innerHeight;\n            camera.updateProjectionMatrix();\n            renderer.setSize(window.innerWidth, window.innerHeight);\n        };\n\n        window.addEventListener('resize', handleResize);\n\n        // Cleanup\n        return () => {\n            window.removeEventListener('resize', handleResize);\n            if (animationIdRef.current) {\n                cancelAnimationFrame(animationIdRef.current);\n            }\n            if (mountRef.current && renderer.domElement) {\n                mountRef.current.removeChild(renderer.domElement);\n            }\n            renderer.dispose();\n        };\n    }, []);\n\n    return (\n        <div\n            ref={mountRef}\n            className=\"fixed inset-0 -z-10\"\n            style={{ pointerEvents: 'none' }}\n        />\n    );\n};\n\nexport default ThreeBackground; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}